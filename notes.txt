 -- Changelog --
 +------------------------------------------------------
	-- 2/08/23 --

	>> IMPORTANT:: heal-state update
		> No more isDrinking, isTaping, isX-- generalizing things!
		-----------
	
	>> What's New?
		> Enum "HealActionState" to help facilliate the handling of heal-like actions.
		> Update downed/ resurrection states

----- Changes to Each Class --
-- : Match :
	-- Fields --
		---- Renames
		--> Rename "_drinkJuicePerTick" FROM "_healPerTick"
		--> Rename "_drinkJuicePerTick" FROM "_healPerTick"
		-------------------

	-- General Methods --
		---- Added
		--> Added `UpdatePlayerHealState`
			... Consolodation of `UpdatePlayerDrinking` & `UpdatePlayerTaping` AND...
		--> Added `CancelAnyHealActions`
		---- Update/ Modify
		--> Updated `UpdateDownedPlayers`
			... Utilize new down system
		--> Update `HandleTeammateResFinished`
		--> Update `HandleTeammateResCancel`
			> Simplified process
			> The ressing player is now solely responsible for revives (previously both members were racing to get it first)
		---- Removed
		--> Removed `UpdatePlayerDrinking`
		--> Removed `UpdatePlayerTaping`
		---- Renames
		--> Rename "CancelAnyActionState" FROM "CheckMovementConflicts"
		--> Rename "SendPlayerFinishedDrinking" FROM "SendPlayerEndDrink"
		--> Rename "SendPlayerFinishedTaping" FROM "SendPlayerEndTape"
		--> Rename "LazyRevivePlayer" FROM "RevivePlayer"
			> Do not use this method outside of /commands. It's true to the lazy part of its name.
		-------------------

	-- NetMessage Methods --
		--> Msg27 handle-method "HandleSlotUpdate" updated
			> Any cancel-able action will be canceled upon swapping slots, as originally intended
				... Was a "slip through the crack" kind of bug
		  -----
		--> Msg47 handle-method "HandleHealingRequest" updated
		--> Msg98 handle-method "HandleTapeRequest" updated
			> Now only does handling/ setting
			> Now calls the required send-method when needed instead of constructing packets itself
		  -----
		--> Msg48 send-method "SendPlayerStartedDrinking" added
		--> Msg99 send-method "SendPlayerStartedTaping" added
			> Now only sends packets as opposed to non-obvious side effects like updating player data.
		  -----
		--> Msg49 send-method "SendPlayerFinishedDrinking" updated
		--> Msg99 send-method "SendPlayerFinishedDrinking" updated
			> Now only sends packets as opposed to non-obvious side effects like updating player data.
			> Now only takes a player id# as opposed to an entire player object
		  -----
		--> Msg81 send-method "SendTeammatePickupStarted" updated.
		--> Msg82 send-method "SendTeammatePickupCanceled" updated.
		--> Msg83 send-method "SendTeammatePickupFinished" updated.
			> Renamed methods/ variable named more consistently
		--> Msg84 send-method "SendPlayerKnockedDowned" added.
		--> Msg80 handle-method "HandleTeammatePickupRequest" updated.
			> Utilize new revive system
		-------------------
			
-- : Player :
	-- Fields --
		---- Added
		--> Added `HealState`
		--> Added `HealActionFinished`
		--> Added [PRIVATE] `_healStateTimer`
		--> Added [PRIVATE] `_hasHealActionEnded`
		--> Added `DownedTeammate`
		--> Added [PRIVATE] `_bleedoutTimer`
		--> Added [PRIVATE] `_isBeingRessed`
		---- Removed
		--> Removed `isDrinking`
		--> Removed `NextHealTime`
		--> Removed `isTaping`
		--> Removed `NextTapeTime`
		--> Removed `isReviving`
		--> Removed `RevivingID`
		--> Removed `SaviourID`
		--> Removed `ReviveTime`
		--> Removed `NextBleedTime`
		-------------------

	-- General Methods --
		---- Added
		--> Added `ElapseTimerOrEnd`
		--> Added `SetHealAction`
		--> Added `ClearHealActionState`
		--> Added `DeductTapeAndAddArmorTick`
		--> Added `CanDrinkJuice`
		--> Added `DrinkJuice`
		--> Added `BeginRevivingHomie`
		--> Added `ClearRevivingHomie`
		--> Added `KnockDown`
		--> Added `BeginBleedoutState`
		--> Added `SetNextBleedoutTime`
		--> Added `ElapseBleedoutEndsTimer`
		--> Added `BeginResState
		--> Added `EndDownedState`
		---- Removed
		--> Remove "SetMyResurrector"
		--> Remove "ResurrectGotCanceledByRessorector"
		--> Remove "ReviveFromDownedState"
		--> Remove "SetWhoImRessing"
		--> Remove "FinishedRessingPlayer"
		-------------------

-- : HealActionState :
	-- Added to project!
		-------------------

	-- Commentary --
		--> Thought more state-like way of handling things would be better than the constant "isX" "isY"
	... whether or not this works out... we'll see I suppose.

 +------------------------------------------------------
	-- 2/07/24 --

	>> IMPORTANT:: "config class" update
		> Basically making the config class more consistent/ able to recognize it loaded an invalid key.
		> Have NOT tested if this with multiple players/ if everything works.
	 ... Some things may be brokey due to adding more spaghetti!
		> Was originally trying to make projectiles work, but that didn't turn out as I wanted.
	... So that is being put on hold for now. The leftovers will be kept for the time being as well.
	
	>> What's New?
		> More config variables to future proof
			> Mostly loot rng seeds (assuming future version utilizes seeds in a similar manner as right now)
		... Obviously the values that are unused in this version go unused.
		> Match constructor with parameter of int/ string (port/ ip) has been removed.
		> SARConstants class no longer in "Level-Related"
			> Constants in SAR are obviously not only related to level loading, so correcting that oopsie.
		... Also going to be using it to store values like heal times that need to be consistent.
		> Weapon class got minor edits to be able to handle projectiles.

--- Changes to Each Class ---
	> This is also a new thing to better separate what's changed.
	> If I ever update the Match class and any NetMessage related stuff I'll point it out, but yeah hopefully this looks nicer?
-- Match--
	-- IMPORTANT --
		--> Old constructor (one that took "int port" & "string ip") has been removed
			> The one using the config class is now the preferred one. Updates to that later...

	-- Fields --
		--> Added `_lobbyPlayersNeededToReduceWait`.
		-------------------

	-- General Methods --
		--> `HandleTapeRequest` updated
			> Utilizes constant for tape action duration, as this is an action we can't make configurable.
		--> `CheckMoleCrates` updated
			> Utilizes constant for move speed. Before it seemed like a magic number (still is imo)
		--> `UpdateDownedPlayers` updated
			> Utilizes the configurable variable for next bleedout time as originally intended.
			> It not doing this was an oopsie...
		--> `UpdateLobbyCountdown()` updated
			> Does all necessary checks within the method, rather than the update loop itself.
			> Also uses new config field "_lobbyPlayersNeededToReduceWait".
		-------------------

	-- NetMessage Methods --
		--> No changes


-- Config --
	--> Added >> replaced ConfigLoader.cs


-- Weapon --
	-- Fields --
		----- Added
		-> Added `BulletMoveSpeed`
		-> Added `BulletMoveSpeedIncPerRarity`
		-> Added `BulletMaxDistanceBase`
		-> Added `BulletMaxDistanceIncPerRarity`


-- Player --
	-- Methods --
		---- Updated
		-> `SetMyResurrector`
			> Revive time is a value we can't make configurable, so it is now using SARConstant's value for it.


-- SARLevel --
	-- Methods --
		----- Updated
		-> `FindWalkableGridLocation`
			> Now verifies that its starting search location is actually invalid before continuing.


-- SARConstants --
	-- Added Constants --
		-> DeliveryMoleMoveSpeed
		-> EagleMoveSpeed
		-> TapeRepairDurationSeconds
		-> TeammateReviveDurationSeconds
		

	-- Commentary --
		--> Nothing.

+------------------------------------------------------
	-- 12/05/23 --

	>> IMPORTANT:: collision/ item "grid" update
		> This whole project is a mess. I have used like 20 different styles/ conventions and still have not settled on a single one...
	... Currently, I am trying to work on making updates more specific, rather than doing many different things as once so can make "versioned updates".
	... I saw someone do that before, and thought it looked cool. But I now realize how dumb that is.
		> ^ TL;DR: expect more short commits like: "update: locating land/ item locations" than "v1.4.2 - I farted and I rewrote everything lol"
		-----------
		> Removed some past update information. This file was getting a bit too long
		> Have NOT tested this with multiple players/ if everything works. So don't be surprised if stuff is NOT sycned
	
	>> What's New?
		> Loot should now spawn on a grid similarly to modern SAR versions!
			> Loot items dropped when a player replaces it with another spawns in unexpected positions...
		... this is partly to do with how item spots on the grid are found in SARLevel/ items are spawned in Match. This can be mitigated...
		... in a future update that directly addresses this issue. It is not addressed in this update because I wanted this one to be more...
		... focused on a particular issue which is finding landing locations/ trying to place loot items on an actual grid.
		> Updated the algorithm that locates valid landing positions
			> It still does not take into account desired directions, but... it should be more readable now?
			> How to accomplish this is beyond me at this moment in time.

--- Changes to Each Class ---
	> This is also a new thing to better separate what's changed.
	> If I ever update the Match class and any NetMessage related stuff I'll point it out, but yeah hopefully this looks nicer?
-- Match--
	-- Fields --
		--> No changes
		-------------------

	-- General Methods --
		--> `HandleDoodadDestructionFromPoint` updated
			> Explosive Doodads could harm players in lobby x-x
		--> HandlePlayerDied, HandleGrassCutRequest, and HandleLootRequestMatch
			> Each method was just lazily editied to pass over the necessary information to the Msg20 send.
			> Nothing more was done, so they should work just fine/ mostly as they had before
		-------------------

	-- NetMessage Methods --
		--> Msg16 handle-method "HandleAttackRequest" updated
			> Now uses weird "rPacketVar" format and uses a separate Msg17 send
		--> Msg17 send-method "SendPlayerAttack" added
		  -----
		--> Msg20 send-method "SendSpawnedLoot" modified
			> New argument: `ref Vector2 startPos`
			> Newly-spawned loot should do its little bounce/ transition animation like in modern versions...
			> As far as I know, all we have to do is send clients the necessary information and they'll play it...
		... The server does not do anything more than just send the start/ end positions every time. Clients figure it out themselves it seems
		  -----
		--> Msg32 handle-method "HandlePlayerLanded" updated.
			> Just uses the new methods and stuff for searching for landing spots!
			

-- SARLevel --
	-- Fields --
		--> No changes
		-------------------

	-- Methods --
		----- Added
		-> Added `FindWalkableGridLocation`
		-> Added `QuickIsValidPlayerLoc`
		-> Added `IsValidPlayerLoc`
		-> Added `FindOKLootSpotFromPoint`
		-> Added `NoItemAtThisSpot

		----- Removed | Landing Search
		-> Removed FindValidPlayerPosition
		-> Removed SearchX
		-> Removed SearchY

		----- Removed | Loot Search
		-> Removed `GetLootPosition` <--- honestly, why did this exist? It just called FindNewItemPosition lol
		-> Removed `FindNewItemPosition`
		-> Removed `IsThereAnItemhere`
		-> Removed ItemSearchX
		-> Removed ItemSearchY
		-------------------

	-- Commentary --
		--> While the new "algorithms" are not much to write home about, at this moment I feel they look better than the previous ones. ...
	... also think they may be faster/ more accurate but don't quote me on that.
		--> At the very least, LootItems are more grid-aligned as opposed to whatever was going on before.
			> They also should spawn/ fill in space similarly to real sar!!

+------------------------------------------------------
	-- 9/30/23 --

	>> IMPORTANT:: I haven't had the chance to test most of this with actual people.
		--> It's mostly been me using custom / """commands""" to experiment with stuff--- so expect some buggy bugs
		--> This lack of testing is partly the reason it's taken so long...
		--> Also was originally supposed to just be update to Client class but did a little more.

	>> Gernerally, it's just trying to make the coding style more consistent.
	>> Clients actually do something now--- represents the person on the other end of a Player
	>> Some improvements to Doodads that should make handling of them easier to deal with in the future

Match:

	++ General Updates:

		- Replaced generic uses of "OK-enough" in comments to "OK... enough". (important I swear)
			-----------
		- Added method `GetNumberOfAliveTeams`.
		- Added method `GetPlayerNodeFromPlayFab`.
		- Added method `FindTeamToAddPlayerTo`.
		- Added method `EnableGhostModeForPlayer`.
		- Added method `CancelAllNonEmoteActions`.
		- Added method `HandleTeammateLeavingMatch`.
		- Added method `RemoveMySpectate`.
		- Added method `HandleDoodadDestructionFromPoint`.
		- Added method `GoWarnModsAndAdmins`.
		- Added method `HandleConnectionApproval`.
			-----------
		- Removed method `TryIndexFromID`.
		- Removed method `TryIDFronName`.
		- Removed method `ValidWeaponIndex`.
			-----------
		- Renamed field `_coconutHeal` to `_coconutHealAmountHP`.
		- Renamed field `_incomingConnections` to `_incomingClients`.
		- Renamed field `svd_LevelLoaded` to `_hasLevelBeenLoaded`.
		- Renamed method `svu_checkForWinnerWinnerChickenDinner` to `CheckForWinnerWinnerChickenDinner`.
		- Renamed method `GetValidPlayerCount` to `GetNumberOfValidPlayerEntries`.
		- Renamed method `SendPlayerEndedEmoting` to `HandleEmoteCancel`.
		- Renamed method `HandleClientDisconnect` to `HandleNetClientDisconnect` (NetClient instead of Client haha)
		- Renamed method `SendTeammateDisconnected` to `SendTeammateLeftMatch`.
		- Renamed method `SendConfirmAttack` to `SendAttackConfirmed`.
		- Renamed method `test_damagePlayer` to `DamagePlayer`.
			-----------
		- Updated method `TryPlayerFromString`.
			--> Attempts to find Player's with usernames matching the search string first, rather than checking if the search string is an id first
			--> This makes it so you're able to move players with usernames that are numbers without accidentally moving other players at filled indexes around.
			--> This function is always kind of bad because there is no real guarantee to differentiate between players with ids-for-names and searching for ids themselves.
		
		- Updated method `HandleNetClientDisconnect`.
			--> Players should now only stick around during in-progress matches, while in lobby they leave.
		
		- Updated method `HandleEmoteCancel`.
			--> Accomplishes by using Player.EmoteEnded() & Msg67 send-method rather doing everything here all over again.
			--> Overall, removing a redundant copy of the EmotePerform send and also removing a point of failure should anything regarding emotes change with Players.
		
		- Updated method `HandleClientDisconnect`.
			--> Will now only remove a player from `_players` if the Match is in a lobby. Should also remove players from team list now.
		
		- Updated method `SendAttackConfirmed`.
			--> Parameters use new naming scheme; sets inital NetMessage buffer size; hamsterballID/ hamsterballNewHP are now optional parameters.
		
		- Updated method `DamagePlayer`.
			--> Removed some logging/ simplified some logic so it should be easier to decipher what the method is doing.
			--> Additonally: documentation using ///summary/// blocks has been added as well.

		- Updated method `HandleSpectatorRequest`.
			--> Utilizes new "RemoveMySpectate" method; also just tried to restructure a little better

	++ Message Handles
		- Msg1 (AuthenticationRequest) handle method "HandleAuthenticationRequest" updated.
			--> Uses new "WCSARS.Client" class to handle options like Party/ Fills better.
		- Msg2 (AuthenticationResponse) send method "SendAuthResponse" added.
			----
		- Msg5 (ClientReadied) handle method "HandlePlayerReadied" updated.
			--> Now only checks if the client is already stored in the player list or not/ readies them and stuff.
			--> Previously did some of this + the building/ sending the response itself. The building/ sending has been moved to a separate method.
		- Msg10 (PlayerCharacters) send method "SendAllPlayerCharacters" added.
			--> Separates out the handle/ send; although the handle does very little in all honesty.
			----
		- Msg9 (MatchEnded) send method "SendRoundEnded" added.
			----
		- Msg14 (PlayerPositionUpdate) handle method `HandlePositionUpdate` updated.
			--> Now utilizes new "MovementMode" system. Hopefully makes things a bit clearer.
			--> Will now try setting the position of the hamsterball that the player is currently riding. (does not check for out of bounds so good luck)
			----
		- Msg21 (LootRequest-Match) handle method "HandleLootRequestMatch" updated.
			--> Now utilizes "VerifyPlayer" to get player from the connection.
			--> Also now utilizes new send method for Msg22.
		- Msg21 (LootRequest-Lobby) handle method "ServerHandleLobbyLootRequest" updated.
			--> Tries to make sure that the player actually exists in the player list/ NetMessage data doesn't crash the program.
			--> Also now utilizes new send method for Msg22.
		- Msg22 (LootedItem) send method "SendPlayerLootedItem" added.
			--> Makes it so Msg21 handles are building/ sending this method themselves
			--> Also makes it so there aren't a ton of repeated versions of this packet scattered about.
			----
		- Msg42 (MatchItemDrops) send method "SendEndScreenItemDrops" added.
			----
		- Msg51 (CoconutEatRequest) handle method "HandleCoconutEatRequest" updated.
		- Msg52 (CoconutEaten) send method "SendCoconutEaten" added.
			----
		- Msg66 (EmoteRequest) handle method "HandleEmoteRequest" updated.
			--> Does some more verification/ utilizes some updated functions.
		- Msg67 (EmotePerformed) send method "SendEmotePerformed" updated.
			--> Now only sends the NetMessage. Updating the actual server-side player data is done separately.
			----
		- Msg72 (DoodadDestroyRequest) handle method "HandleDoodadDestroyed" updated.
			--> Now only does the handling of the packet data; also simply passes the read data onto a separate handle method for Doodad destruction.
		- Msg73 (DoodadDestroyConfirm) send method "" updated.
			--> Now only does the sending of packet data. Previously this method would figure out damage values and whatnot.
			----
		- Msg85 (MapMarkedRequest) handle method "HandleMapMarked" updated.
		- Msg86 (MapMarked) send method "SendMapMarked" updated.
			----
		- Msg95 (TeammateDisconnected) send method "SendTeammateLeftMatch" updated.
			--> Now only sends the NetMessage. Handling of leaving teammates is done elsewhere (HandleTeammateLeavingMatch).

Player:
	-----------
	Note: moved to SARStuff.Players
	-----------
	- Added field `Client`.
		--> Replaces field `Sender`.
	- Added field `Placement`.
	-----------
	- Added method `EmoteStarted`.
	- Added method `EmoteEnded`.
	- Added method `AddTeammate`.
		--> Makes life easier when trying to add teammates.
	-----------
	- Updated constructor.
		--> Now takes a Client.
	-----------
	- Removed field `Sender`.
	- | Removed field `PlayFabID`.
	- | Removed field `isDev`.
	- | Removed field `isMod`.
	- | Removed field `isFounder`.
	  |--> To access these, one now must use a Player's associated Client.
	  |--> Perhaps a todo is to have op-levels so stuff isn't just locked behind these sorts of things.
	-----------
	- Renamed field `isReady` to `hasReadied`.
	- Renamed field `VehicleID` to `HamsterballID`.

Client:
	-----------
	Note: moved to SARStuff.Players
	-----------
	--- Finally does something
	--- Used to represent the client player connected to the match.
	--- Things like their NetConnection; Party; Fills; PlayFabID; etc. all go here. These get attached to players.


SARConstants:
	- Added to project.
		--> This should make keeping track of things that should be constant a bit easier than previous.
		--> Still several things should be added, such as json-keys/ NetMessage names; but it is a start.

SARLevel:
	- Now loads playerSpawns
	- Utilzies SARConstants for tarp size.

Vector2
	- Added method `IsNear`.
		--> Replaces Vector2.ValidDistance(a,b,t, TRUE)
		--> Old method of checking for square distance within a range was redundant
			---
	- Added method `IsNearSqrt`.
		--> Replaces Vector2.ValidDistance(a,b,t, FALSE)
		--> This isn't ever used, but in case there is ever a time we really want more accuracy it is already here.
			-----------
	- | Renamed field `magnitudeSquared` to `sqrMagnitude`.
	- | Renamed method `MoveToVector` to `MoveTowards`.
	  |--> This is to be more in line with what Unity actually calls these methods.

MovementMode:
	- Added to project.


Simply cleaning up/ re-styling:
	- | Decal
	- | DoodadType
	- | Tile.
	  |--> Overall nothing of significance has changed other than simply trying to make things more consistent/ easier to read


Oopsies:
	- Lobby section of ServerUpdateLoop was not using "UpdatePlayerEmotes" like the match section was.
		--> This had allowed for infinite emoting for certain emotes; which this should no longer be the case.

	- HandlePositionUpdate was not updating the postion of Hamsterballs a Player was riding.
		--> This caused players within range of an explosive barrel to get hurt whilst their hamsterball stayed intact.

	- Godded-players riding hamsterballs would have the attack confirm sound play when they were hit

+------------------------------------------------------